import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../data/fact_check_repository.dart';
import '../data/api_fact_check_repository.dart';
import '../data/fact_check_repository_interface.dart';
import '../services/api_service.dart';
import '../models/fact_check.dart';

// Configuration: toggle between mock and real API
const bool useRealApi = true; // Set to true when backend is ready

// API service provider
final apiServiceProvider = Provider((ref) => ApiService());

// Repository provider - switches between mock and real API
final factCheckRepoProvider = Provider<FactCheckRepositoryInterface>((ref) {
  if (useRealApi) {
    final apiService = ref.watch(apiServiceProvider);
    return ApiFactCheckRepository(apiService);
  } else {
    return FactCheckRepository(); // Mock repository
  }
});

// Latest fact checks provider
final latestFactChecksProvider = FutureProvider<List<FactCheck>>(
  (ref) => ref.watch(factCheckRepoProvider).getLatest(),
);

// Fact check by ID provider
final factCheckByIdProvider = FutureProvider.family<FactCheck?, String>(
  (ref, id) => ref.watch(factCheckRepoProvider).getById(id),
);

// Search fact checks provider
final searchFactChecksProvider = FutureProvider.family<List<FactCheck>, String>(
  (ref, query) => ref.watch(factCheckRepoProvider).searchFactChecks(query),
);

// Fact checks by verdict provider
final factChecksByVerdictProvider =
    FutureProvider.family<List<FactCheck>, Verdict>(
      (ref, verdict) => ref.watch(factCheckRepoProvider).getByVerdict(verdict),
    );

// Auto-generated fact checks provider
final autoGeneratedFactChecksProvider = FutureProvider<List<FactCheck>>(
  (ref) => ref.watch(factCheckRepoProvider).getAutoGenerated(),
);

// Verdict statistics provider
final verdictStatisticsProvider = FutureProvider<Map<Verdict, int>>(
  (ref) => ref.watch(factCheckRepoProvider).getVerdictStatistics(),
);
