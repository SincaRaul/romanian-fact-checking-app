import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../models/fact_check.dart';
import '../providers/fact_check_providers.dart';
import '../utils/verdict_extensions.dart';

class ExploreScreen extends ConsumerStatefulWidget {
  const ExploreScreen({super.key});

  @override
  ConsumerState<ExploreScreen> createState() => _ExploreScreenState();
}

class _ExploreScreenState extends ConsumerState<ExploreScreen>
    with TickerProviderStateMixin {
  String _searchQuery = '';
  Verdict? _selectedVerdict;
  bool _showOnlyAutoGenerated = false;
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ExploreazÄƒ'),
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(icon: Icon(Icons.list), text: 'Toate'),
            Tab(icon: Icon(Icons.trending_up), text: 'Populare'),
          ],
        ),
      ),
      body: Column(
        children: [
          // Search and Filter Section
          _buildSearchAndFilters(),

          // Tab Content
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [_buildAllFactChecks(), _buildPopularFactChecks()],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchAndFilters() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // Search Bar
          TextField(
            decoration: InputDecoration(
              hintText: 'CautÄƒ fact-check-uri...',
              prefixIcon: const Icon(Icons.search),
              suffixIcon: _searchQuery.isNotEmpty
                  ? IconButton(
                      icon: const Icon(Icons.clear),
                      onPressed: () => setState(() => _searchQuery = ''),
                    )
                  : null,
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              filled: true,
              fillColor: Theme.of(context).colorScheme.surfaceContainerHighest,
            ),
            onChanged: (value) => setState(() => _searchQuery = value),
          ),
          const SizedBox(height: 12),

          // Filter Row
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: [
                // Verdict Filter
                _buildFilterChip(
                  label: _selectedVerdict?.displayName ?? 'Toate verdictele',
                  icon: _selectedVerdict?.iconData ?? Icons.filter_list,
                  isSelected: _selectedVerdict != null,
                  onTap: () => _showVerdictFilter(),
                ),
                const SizedBox(width: 8),

                // Auto-generated Filter
                _buildFilterChip(
                  label: 'Automate',
                  icon: Icons.smart_toy,
                  isSelected: _showOnlyAutoGenerated,
                  onTap: () => setState(
                    () => _showOnlyAutoGenerated = !_showOnlyAutoGenerated,
                  ),
                ),
                const SizedBox(width: 8),

                // Clear Filters
                if (_selectedVerdict != null || _showOnlyAutoGenerated)
                  _buildFilterChip(
                    label: 'È˜terge filtre',
                    icon: Icons.clear,
                    isSelected: false,
                    onTap: () => setState(() {
                      _selectedVerdict = null;
                      _showOnlyAutoGenerated = false;
                    }),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFilterChip({
    required String label,
    required IconData icon,
    required bool isSelected,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: isSelected
              ? Theme.of(context).colorScheme.primaryContainer
              : Theme.of(context).colorScheme.surfaceContainerHighest,
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: isSelected
                ? Theme.of(context).colorScheme.primary
                : Colors.transparent,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              size: 16,
              color: isSelected
                  ? Theme.of(context).colorScheme.primary
                  : Theme.of(context).colorScheme.onSurfaceVariant,
            ),
            const SizedBox(width: 6),
            Text(
              label,
              style: TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.w500,
                color: isSelected
                    ? Theme.of(context).colorScheme.primary
                    : Theme.of(context).colorScheme.onSurfaceVariant,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAllFactChecks() {
    final asyncFactChecks = ref.watch(latestFactChecksProvider);

    return asyncFactChecks.when(
      data: (factChecks) {
        var filteredChecks = factChecks.where((check) {
          // Search filter
          if (_searchQuery.isNotEmpty) {
            if (!check.title.toLowerCase().contains(
              _searchQuery.toLowerCase(),
            )) {
              return false;
            }
          }

          // Verdict filter
          if (_selectedVerdict != null && check.verdict != _selectedVerdict) {
            return false;
          }

          // Auto-generated filter
          if (_showOnlyAutoGenerated && !check.autoGenerated) {
            return false;
          }

          return true;
        }).toList();

        if (filteredChecks.isEmpty) {
          return _buildEmptyState();
        }

        return RefreshIndicator(
          onRefresh: () async {
            ref.invalidate(latestFactChecksProvider);
          },
          child: ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: filteredChecks.length,
            itemBuilder: (context, index) {
              return Padding(
                padding: const EdgeInsets.only(bottom: 12),
                child: _buildFactCheckCard(filteredChecks[index]),
              );
            },
          ),
        );
      },
      loading: () => const Center(child: CircularProgressIndicator()),
      error: (error, _) => _buildErrorState(error),
    );
  }

  Widget _buildPopularFactChecks() {
    // For now, show the same data but sorted by confidence
    final asyncFactChecks = ref.watch(latestFactChecksProvider);

    return asyncFactChecks.when(
      data: (factChecks) {
        var popularChecks = List<FactCheck>.from(factChecks);
        popularChecks.sort((a, b) => b.confidence.compareTo(a.confidence));

        return RefreshIndicator(
          onRefresh: () async {
            ref.invalidate(latestFactChecksProvider);
          },
          child: ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: popularChecks.length,
            itemBuilder: (context, index) {
              return Padding(
                padding: const EdgeInsets.only(bottom: 12),
                child: _buildFactCheckCard(
                  popularChecks[index],
                  showPopularityBadge: true,
                ),
              );
            },
          ),
        );
      },
      loading: () => const Center(child: CircularProgressIndicator()),
      error: (error, _) => _buildErrorState(error),
    );
  }

  Widget _buildFactCheckCard(
    FactCheck factCheck, {
    bool showPopularityBadge = false,
  }) {
    return Card(
      elevation: 2,
      child: InkWell(
        onTap: () {
          debugPrint('ðŸ”— Navigating to: /details/${factCheck.id}');
          // Navighez cu query parameter pentru a È™ti de unde vin
          context.go('/details/${factCheck.id}?from=explore');
        },
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header Row
              Row(
                children: [
                  // Verdict Badge
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      color: factCheck.verdict.color.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(
                        color: factCheck.verdict.color.withValues(alpha: 0.3),
                      ),
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          factCheck.verdict.iconData,
                          size: 14,
                          color: factCheck.verdict.color,
                        ),
                        const SizedBox(width: 4),
                        Text(
                          factCheck.verdict.displayName,
                          style: TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.w600,
                            color: factCheck.verdict.color,
                          ),
                        ),
                      ],
                    ),
                  ),
                  const Spacer(),

                  // Popularity Badge
                  if (showPopularityBadge && factCheck.confidence > 80) ...[
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 6,
                        vertical: 2,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.orange.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Icon(
                            Icons.trending_up,
                            size: 12,
                            color: Colors.orange.shade700,
                          ),
                          const SizedBox(width: 2),
                          Text(
                            'Popular',
                            style: TextStyle(
                              fontSize: 10,
                              fontWeight: FontWeight.w600,
                              color: Colors.orange.shade700,
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(width: 8),
                  ],

                  // Confidence
                  Text(
                    '${factCheck.confidence}%',
                    style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      fontWeight: FontWeight.w600,
                      color: Theme.of(context).colorScheme.primary,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 12),

              // Title
              Text(
                factCheck.title,
                style: Theme.of(
                  context,
                ).textTheme.bodyLarge?.copyWith(fontWeight: FontWeight.w600),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 12),

              // Metadata Row
              Row(
                children: [
                  Icon(
                    Icons.schedule,
                    size: 14,
                    color: Theme.of(context).colorScheme.onSurfaceVariant,
                  ),
                  const SizedBox(width: 4),
                  Text(
                    _formatDate(factCheck.publishedAt),
                    style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Theme.of(context).colorScheme.onSurfaceVariant,
                    ),
                  ),
                  const SizedBox(width: 16),
                  if (factCheck.autoGenerated) ...[
                    Icon(
                      Icons.smart_toy,
                      size: 14,
                      color: Theme.of(context).colorScheme.onSurfaceVariant,
                    ),
                    const SizedBox(width: 4),
                    Text(
                      'Verificare automatÄƒ',
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: Theme.of(context).colorScheme.onSurfaceVariant,
                      ),
                    ),
                  ],
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.search_off,
            size: 64,
            color: Theme.of(context).colorScheme.onSurfaceVariant,
          ),
          const SizedBox(height: 16),
          Text(
            'Nu am gÄƒsit rezultate',
            style: Theme.of(context).textTheme.titleLarge,
          ),
          const SizedBox(height: 8),
          Text(
            'ÃŽncearcÄƒ sÄƒ modifici filtrele sau termenii de cÄƒutare',
            style: Theme.of(context).textTheme.bodyMedium,
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () => setState(() {
              _searchQuery = '';
              _selectedVerdict = null;
              _showOnlyAutoGenerated = false;
            }),
            child: const Text('È˜terge toate filtrele'),
          ),
        ],
      ),
    );
  }

  Widget _buildErrorState(Object error) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.error_outline,
            size: 64,
            color: Theme.of(context).colorScheme.error,
          ),
          const SizedBox(height: 16),
          Text(
            'Eroare la Ã®ncÄƒrcarea datelor',
            style: Theme.of(context).textTheme.titleLarge,
          ),
          const SizedBox(height: 8),
          Text(
            error.toString(),
            style: Theme.of(context).textTheme.bodyMedium,
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
              ref.invalidate(latestFactChecksProvider);
            },
            child: const Text('ÃŽncearcÄƒ din nou'),
          ),
        ],
      ),
    );
  }

  void _showVerdictFilter() {
    showModalBottomSheet(
      context: context,
      builder: (context) => Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'FiltreazÄƒ dupÄƒ verdict',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            ...Verdict.values.map(
              (verdict) => ListTile(
                leading: Icon(verdict.iconData, color: verdict.color),
                title: Text(verdict.displayName),
                trailing: _selectedVerdict == verdict
                    ? const Icon(Icons.check)
                    : null,
                onTap: () {
                  setState(() => _selectedVerdict = verdict);
                  Navigator.pop(context);
                },
              ),
            ),
            ListTile(
              leading: const Icon(Icons.clear),
              title: const Text('Toate verdictele'),
              trailing: _selectedVerdict == null
                  ? const Icon(Icons.check)
                  : null,
              onTap: () {
                setState(() => _selectedVerdict = null);
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
    );
  }

  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);

    if (difference.inDays == 0) {
      if (difference.inHours == 0) {
        return '${difference.inMinutes} min';
      }
      return '${difference.inHours}h';
    } else if (difference.inDays == 1) {
      return 'Ieri';
    } else if (difference.inDays < 7) {
      return '${difference.inDays} zile';
    } else {
      return '${date.day}/${date.month}/${date.year}';
    }
  }
}
