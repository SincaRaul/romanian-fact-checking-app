// lib/features/home/widgets/stats_banner.dart
import 'package:flutter/material.dart';

class StatsBanner extends StatelessWidget {
  const StatsBanner({
    super.key,
    required this.newCount,
    required this.autoGeneratedPct, // 0..100
    required this.editorialPct, // 0..100
  });

  final int newCount;
  final int autoGeneratedPct;
  final int editorialPct;
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return Card(
      elevation: 0,
      color: colorScheme.primaryContainer.withValues(alpha: 0.4),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(24)),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Row titlu
            Row(
              children: [
                Icon(Icons.verified, color: colorScheme.primary, size: 24),
                const SizedBox(width: 8),
                Text(
                  'Știri verificate',
                  style: theme.textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.w600,
                    color: colorScheme.onPrimaryContainer,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),

            // Main count
            Text(
              '$newCount verificări totale',
              style: theme.textTheme.headlineMedium?.copyWith(
                fontWeight: FontWeight.w700,
                color: colorScheme.onPrimaryContainer,
              ),
            ),
            const SizedBox(height: 20),

            // KPI metrics
            _buildKPI(
              context,
              'Generate Automat',
              '$autoGeneratedPct%',
              value: autoGeneratedPct / 100,
              color: Colors.blue,
            ),
            const SizedBox(height: 12),
            _buildKPI(
              context,
              'Verificări Editoriale',
              '$editorialPct%',
              value: editorialPct / 100,
              color: Colors.green,
            ),
            const SizedBox(height: 20),

            // Action buttons
            Row(
              children: [
                const Spacer(),
                IconButton(
                  tooltip: 'Metodologie',
                  onPressed: () => _showMethodologyDialog(context),
                  icon: Icon(Icons.info_outline, color: colorScheme.primary),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildKPI(
    BuildContext context,
    String label,
    String valueText, {
    required double value,
    required Color color,
  }) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Text(
              label,
              style: theme.textTheme.bodyLarge?.copyWith(
                fontWeight: FontWeight.w500,
                color: colorScheme.onPrimaryContainer,
              ),
            ),
            const Spacer(),
            Text(
              valueText,
              style: theme.textTheme.bodyLarge?.copyWith(
                fontWeight: FontWeight.w600,
                color: colorScheme.onPrimaryContainer,
              ),
            ),
          ],
        ),
        const SizedBox(height: 6),
        ClipRRect(
          borderRadius: BorderRadius.circular(8),
          child: LinearProgressIndicator(
            value: value.clamp(0.0, 1.0),
            minHeight: 8,
            backgroundColor: colorScheme.surface.withValues(alpha: 0.6),
            valueColor: AlwaysStoppedAnimation<Color>(color),
          ),
        ),
      ],
    );
  }

  void _showMethodologyDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Cum calculăm aceste valori'),
        content: const Text(
          'Procentele sunt calculate pe baza tipului de verificare. '
          '„Generate Automat" reprezintă fact-check-urile procesate automat de AI, '
          'iar „Verificări Editoriale" sunt realizate manual de către echipa noastră.\n\n'
          'Datele sunt actualizate în timp real pe măsură ce se adaugă '
          'noi verificări în sistem.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Înțeles'),
          ),
        ],
      ),
    );
  }
}
