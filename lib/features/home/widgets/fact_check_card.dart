// lib/features/home/widgets/fact_check_card.dart
import 'package:flutter/material.dart';
import '../../../models/fact_check.dart';
import '../../../widgets/verdict_badge.dart';

class FactCheckCard extends StatelessWidget {
  const FactCheckCard({
    super.key,
    required this.factCheck,
    required this.onTap,
  });

  final FactCheck factCheck;
  final VoidCallback onTap;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return Card(
      elevation: 0,
      margin: const EdgeInsets.symmetric(vertical: 4),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: colorScheme.outlineVariant, width: 1),
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(16),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Leading verdict pill
              _buildVerdictPill(context),
              const SizedBox(width: 12),

              // Content
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Title
                    Text(
                      factCheck.title,
                      style: theme.textTheme.bodyLarge?.copyWith(
                        fontWeight: FontWeight.w600,
                        height: 1.3,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 8),

                    // Summary if available
                    if (factCheck.summary?.isNotEmpty == true) ...[
                      Text(
                        factCheck.summary!,
                        style: theme.textTheme.bodyMedium?.copyWith(
                          color: colorScheme.onSurfaceVariant,
                          height: 1.3,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                      const SizedBox(height: 8),
                    ],

                    // Metadata row
                    Row(
                      children: [
                        // Verdict badge
                        VerdictBadge(
                          factCheck: factCheck,
                          fontSize: 11,
                          padding: const EdgeInsets.symmetric(
                            horizontal: 6,
                            vertical: 2,
                          ),
                        ),
                        const SizedBox(width: 8),

                        // Auto-generated indicator
                        if (factCheck.autoGenerated) ...[
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 6,
                              vertical: 2,
                            ),
                            decoration: BoxDecoration(
                              color: colorScheme.tertiaryContainer,
                              borderRadius: BorderRadius.circular(4),
                            ),
                            child: Text(
                              'AI',
                              style: theme.textTheme.labelSmall?.copyWith(
                                color: colorScheme.onTertiaryContainer,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                          const SizedBox(width: 8),
                        ],

                        // Date
                        Text(
                          _formatRelativeTime(factCheck.publishedAt),
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: colorScheme.onSurfaceVariant,
                          ),
                        ),

                        const Spacer(),

                        // Sources count if available
                        if (factCheck.sources?.isNotEmpty == true) ...[
                          Icon(
                            Icons.link,
                            size: 16,
                            color: colorScheme.onSurfaceVariant,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            '${factCheck.sources!.length}',
                            style: theme.textTheme.bodySmall?.copyWith(
                              color: colorScheme.onSurfaceVariant,
                            ),
                          ),
                        ],
                      ],
                    ),
                  ],
                ),
              ),

              // Trailing chevron
              Icon(
                Icons.chevron_right,
                color: colorScheme.onSurfaceVariant,
                size: 20,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildVerdictPill(BuildContext context) {
    Color pillColor;

    switch (factCheck.verdict) {
      case Verdict.true_:
        pillColor = Colors.green;
        break;
      case Verdict.false_:
        pillColor = Colors.red;
        break;
      case Verdict.mixed:
        pillColor = Colors.orange;
        break;
      case Verdict.unclear:
        pillColor = Colors.grey;
        break;
    }

    return Container(
      width: 8,
      height: 60,
      decoration: BoxDecoration(
        color: pillColor,
        borderRadius: BorderRadius.circular(4),
      ),
    );
  }

  String _formatRelativeTime(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);

    if (difference.inDays > 7) {
      return '${difference.inDays} zile';
    } else if (difference.inDays > 0) {
      return '${difference.inDays}z';
    } else if (difference.inHours > 0) {
      return '${difference.inHours}h';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}m';
    } else {
      return 'Acum';
    }
  }
}
