// lib/features/home/new_home_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../../models/fact_check.dart';
import '../../providers/fact_check_providers.dart';
import '../filters/category_providers.dart';
import '../filters/filter_strip.dart';
import 'home_providers.dart';
import 'widgets/home_header.dart';
import 'widgets/stats_banner.dart';
import 'widgets/fact_check_card.dart';

class NewHomeScreen extends ConsumerStatefulWidget {
  const NewHomeScreen({super.key});

  @override
  ConsumerState<NewHomeScreen> createState() => _NewHomeScreenState();
}

class _NewHomeScreenState extends ConsumerState<NewHomeScreen> {
  String _searchTerm = '';

  @override
  Widget build(BuildContext context) {
    final asyncChecks = ref.watch(personalizedFactChecksProvider);
    final categories = ref.watch(categoriesProvider);
    final selectedCategory = ref.watch(selectedCategoryProvider);
    final timeframe = ref.watch(timeframeProvider);
    final stats = ref.watch(statsProvider);

    return Scaffold(
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => context.push('/ask'),
        label: const Text('Întreabă'),
        icon: const Icon(Icons.add_comment),
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Theme.of(context).colorScheme.onPrimary,
      ),
      body: SafeArea(
        child: RefreshIndicator(
          onRefresh: () async {
            ref.invalidate(personalizedFactChecksProvider);
            ref.invalidate(homeStatisticsProvider);
            ref.invalidate(statsProvider);
          },
          child: CustomScrollView(
            slivers: [
              // Header
              SliverToBoxAdapter(
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(16, 8, 16, 0),
                  child: HomeHeader(
                    onSearchChanged: (term) {
                      setState(() {
                        _searchTerm = term;
                      });
                    },
                  ),
                ),
              ),

              // Stats Banner
              SliverToBoxAdapter(
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(16, 16, 16, 0),
                  child: stats.when(
                    data: (statsData) => StatsBanner(
                      newCount: statsData['newCount'] ?? 0,
                      autoGeneratedPct: statsData['autoGeneratedPct'] ?? 0,
                      editorialPct: statsData['editorialPct'] ?? 0,
                      timeframe: timeframe,
                      onTimeframeChanged: (newTimeframe) {
                        ref.read(timeframeProvider.notifier).state = newTimeframe;
                      },
                    ),
                    loading: () => const Card(
                      child: Padding(
                        padding: EdgeInsets.all(20),
                        child: Center(
                          child: CircularProgressIndicator(),
                        ),
                      ),
                    ),
                    error: (_, __) => const Card(
                      child: Padding(
                        padding: EdgeInsets.all(20),
                        child: Center(
                          child: Text('Eroare la încărcarea statisticilor'),
                        ),
                      ),
                    ),
                  ),
                ),
              ),

              // Hot News Strip - shows trending fact-checks
              // Filter Strip
              SliverToBoxAdapter(
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(16, 20, 16, 0),
                  child: FilterStrip(
                    categories: categories,
                    selectedKey: selectedCategory,
                    onCategory: (key) {
                      ref.read(selectedCategoryProvider.notifier).state = key;
                    },
                    selectedType: ref.watch(factCheckTypeProvider),
                    onTypeChanged: (newType) {
                      ref.read(factCheckTypeProvider.notifier).state = newType;
                    },
                  ),
                ),
              ),

              // Fact Checks List
              asyncChecks.when(
                data: (factChecks) {
                  final selectedType = ref.watch(factCheckTypeProvider);
                  final filteredChecks = _filterFactChecks(
                    factChecks,
                    selectedCategory,
                    _searchTerm,
                    selectedType,
                  );

                  if (filteredChecks.isEmpty) {
                    return SliverFillRemaining(
                      child: _buildEmptyState(context),
                    );
                  }

                  return SliverPadding(
                    padding: const EdgeInsets.fromLTRB(16, 16, 16, 100),
                    sliver: SliverList(
                      delegate: SliverChildBuilderDelegate((context, index) {
                        final factCheck = filteredChecks[index];
                        return FactCheckCard(
                          factCheck: factCheck,
                          onTap: () => context.push('/details/${factCheck.id}'),
                        );
                      }, childCount: filteredChecks.length),
                    ),
                  );
                },
                loading: () => SliverPadding(
                  padding: const EdgeInsets.fromLTRB(16, 16, 16, 100),
                  sliver: SliverList(
                    delegate: SliverChildBuilderDelegate(
                      (context, index) => _buildSkeletonCard(context),
                      childCount: 5,
                    ),
                  ),
                ),
                error: (error, stack) => SliverFillRemaining(
                  child: _buildErrorState(context, error.toString()),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  List<FactCheck> _filterFactChecks(
    List<FactCheck> factChecks,
    String? selectedCategory,
    String searchTerm,
    String selectedType,
  ) {
    var filtered = factChecks;

    // Filter by category
    if (selectedCategory != null) {
      filtered = filtered
          .where((fc) => fc.category == selectedCategory)
          .toList();
    }

    // Filter by type (automate/manuale)
    if (selectedType == 'automate') {
      filtered = filtered.where((fc) => fc.autoGenerated).toList();
    } else if (selectedType == 'manuale') {
      filtered = filtered.where((fc) => !fc.autoGenerated).toList();
    }

    // Filter by search term
    if (searchTerm.isNotEmpty) {
      final lowerSearchTerm = searchTerm.toLowerCase();
      filtered = filtered
          .where(
            (fc) =>
                fc.title.toLowerCase().contains(lowerSearchTerm) ||
                (fc.summary?.toLowerCase().contains(lowerSearchTerm) ??
                    false) ||
                (fc.category?.toLowerCase().contains(lowerSearchTerm) ??
                    false) ||
                _matchesCategoryInRomanian(fc.category, lowerSearchTerm),
          )
          .toList();
    }

    return filtered;
  }

  // Funcție pentru a verifica dacă termenul de căutare se potrivește cu categoria în română
  bool _matchesCategoryInRomanian(String? category, String searchTerm) {
    if (category == null) return false;

    // Map categorii engleza -> termeni romana (inclusiv variante cu/fără diacritice și sinonime)
    final categoryMapping = {
      'environment': [
        'mediu',
        'natura',
        'natură',
        'natural',
        'naturala',
        'naturală',
        'ecologie',
        'ecologic',
        'verde',
        'climat',
        'climatic',
        'climatica',
        'climatică',
        'padure',
        'pădure',
        'animal',
        'animale',
        'planta',
        'plantă',
        'plante',
      ],
      'health': [
        'sanatate',
        'sănătate',
        'sanatos',
        'sănătos',
        'medical',
        'medicina',
        'medicină',
        'doctor',
        'medic',
        'spital',
        'tratament',
        'boala',
        'boală',
        'boli',
      ],
      'football': [
        'fotbal',
        'sport',
        'sportiv',
        'minge',
        'echipa',
        'echipă',
        'joc',
        'meci',
        'stadion',
        'gol',
        'goluri',
        'campionat',
        'liga',
      ],
      'politics_internal': [
        'politica',
        'politică',
        'intern',
        'interna',
        'internă',
        'domestic',
        'domestica',
        'domestică',
        'guvern',
        'parlament',
        'minister',
        'presedinte',
        'președinte',
        'primar',
      ],
      'politics_external': [
        'politica',
        'politică',
        'extern',
        'externa',
        'externă',
        'international',
        'internațional',
        'strainatate',
        'străinătate',
        'europa',
        'america',
        'asia',
        'diplomatie',
        'diplomație',
      ],
      'technology': [
        'tehnologie',
        'tehnologic',
        'tehnologica',
        'tehnologică',
        'tech',
        'tehnologie',
        'calculator',
        'computer',
        'digital',
        'internet',
        'aplicatie',
        'aplicație',
        'software',
      ],
      'economy': [
        'economie',
        'economic',
        'economica',
        'economică',
        'financiar',
        'financiara',
        'financiară',
        'bani',
        'euro',
        'leu',
        'lei',
        'crestere',
        'creștere',
        'inflatie',
        'inflație',
      ],
      'bills': [
        'facturi',
        'factura',
        'factură',
        'utilitati',
        'utilități',
        'plata',
        'plată',
        'curent',
        'apa',
        'apă',
        'gaz',
        'caldura',
        'căldură',
        'energie',
      ],
      'other': [
        'altele',
        'alte',
        'divers',
        'diverse',
        'general',
        'generala',
        'generală',
        'variat',
        'variata',
        'variată',
        'miscellaneous',
      ],
    };

    final romanianTerms = categoryMapping[category] ?? [];
    return romanianTerms.any(
      (term) =>
          term.contains(searchTerm) ||
          searchTerm.contains(term) ||
          _removeDiacritics(term).contains(_removeDiacritics(searchTerm)) ||
          _removeDiacritics(searchTerm).contains(_removeDiacritics(term)),
    );
  }

  // Funcție helper pentru a elimina diacriticele
  String _removeDiacritics(String text) {
    return text
        .replaceAll('ă', 'a')
        .replaceAll('â', 'a')
        .replaceAll('î', 'i')
        .replaceAll('ș', 's')
        .replaceAll('ț', 't')
        .replaceAll('Ă', 'A')
        .replaceAll('Â', 'A')
        .replaceAll('Î', 'I')
        .replaceAll('Ș', 'S')
        .replaceAll('Ț', 'T');
  }

  Widget _buildEmptyState(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.search_off,
              size: 64,
              color: colorScheme.onSurfaceVariant,
            ),
            const SizedBox(height: 16),
            Text(
              'Nu am găsit verificări',
              style: theme.textTheme.headlineSmall?.copyWith(
                color: colorScheme.onSurfaceVariant,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Încearcă să modifici filtrele sau să cauți altceva.',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: colorScheme.onSurfaceVariant,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            FilledButton.icon(
              onPressed: () => context.push('/ask'),
              icon: const Icon(Icons.add_comment),
              label: const Text('Pune o întrebare'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildErrorState(BuildContext context, String error) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.error_outline, size: 64, color: colorScheme.error),
            const SizedBox(height: 16),
            Text(
              'A apărut o eroare',
              style: theme.textTheme.headlineSmall?.copyWith(
                color: colorScheme.error,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              error,
              style: theme.textTheme.bodyMedium?.copyWith(
                color: colorScheme.onSurfaceVariant,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            FilledButton.icon(
              onPressed: () {
                ref.invalidate(personalizedFactChecksProvider);
              },
              icon: const Icon(Icons.refresh),
              label: const Text('Încearcă din nou'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSkeletonCard(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;

    return Card(
      elevation: 0,
      margin: const EdgeInsets.symmetric(vertical: 4),
      color: colorScheme.surface, // solid background, no transparency
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: colorScheme.outlineVariant),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Leading pill skeleton - solid color, no transparency
            Container(
              width: 8,
              height: 60,
              decoration: BoxDecoration(
                color: colorScheme.surfaceContainerHigh,
                borderRadius: BorderRadius.circular(4),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Title skeleton - solid colors, different shades for hierarchy
                  Container(
                    height: 20,
                    decoration: BoxDecoration(
                      color: colorScheme.surfaceContainerHigh,
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Container(
                    height: 20,
                    width: 200,
                    decoration: BoxDecoration(
                      color: colorScheme.surfaceContainer,
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                  const SizedBox(height: 12),
                  // Metadata skeleton - lighter shade
                  Row(
                    children: [
                      Container(
                        height: 16,
                        width: 60,
                        decoration: BoxDecoration(
                          color: colorScheme.surfaceContainer,
                          borderRadius: BorderRadius.circular(4),
                        ),
                      ),
                      const SizedBox(width: 8),
                      Container(
                        height: 16,
                        width: 40,
                        decoration: BoxDecoration(
                          color: colorScheme.surfaceContainerLow,
                          borderRadius: BorderRadius.circular(4),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
