import '../models/fact_check.dart';
import '../services/api_service.dart';
import '../services/fact_checks_api.dart';
import 'fact_check_repository_interface.dart';
import 'package:flutter/foundation.dart';

class ApiFactCheckRepository implements FactCheckRepositoryInterface {
  final FactChecksApi _api;

  ApiFactCheckRepository(ApiService apiService)
    : _api = FactChecksApi(apiService);

  @override
  Future<List<FactCheck>> getLatest() async {
    try {
      return await _api.getLatest();
    } catch (e) {
      // Fallback to empty list on error for better UX
      debugPrint('Error fetching fact checks: $e');
      return [];
    }
  }

  @override
  Future<FactCheck?> getById(String id) async {
    try {
      return await _api.getById(id);
    } catch (e) {
      debugPrint('Error fetching fact check by ID: $e');
      return null;
    }
  }

  @override
  Future<List<FactCheck>> searchFactChecks(String query) async {
    try {
      // For now, get all and filter locally
      // In production, this would be a server-side search endpoint
      final allChecks = await _api.getLatest(limit: 100);
      final lowercaseQuery = query.toLowerCase();
      return allChecks
          .where((check) => check.title.toLowerCase().contains(lowercaseQuery))
          .toList();
    } catch (e) {
      debugPrint('Error searching fact checks: $e');
      return [];
    }
  }

  @override
  Future<List<FactCheck>> getByVerdict(Verdict verdict) async {
    try {
      // For now, get all and filter locally
      // In production, this would be a server-side filter endpoint
      final allChecks = await _api.getLatest(limit: 100);
      return allChecks.where((check) => check.verdict == verdict).toList();
    } catch (e) {
      debugPrint('Error filtering fact checks by verdict: $e');
      return [];
    }
  }

  @override
  Future<List<FactCheck>> getAutoGenerated() async {
    try {
      final allChecks = await _api.getLatest(limit: 100);
      return allChecks.where((check) => check.autoGenerated).toList();
    } catch (e) {
      debugPrint('Error getting auto-generated fact checks: $e');
      return [];
    }
  }

  @override
  Future<Map<Verdict, int>> getVerdictStatistics() async {
    try {
      final allChecks = await _api.getLatest(limit: 100);
      final stats = <Verdict, int>{};

      for (final verdict in Verdict.values) {
        stats[verdict] = allChecks
            .where((check) => check.verdict == verdict)
            .length;
      }

      return stats;
    } catch (e) {
      debugPrint('Error getting verdict statistics: $e');
      return {for (final v in Verdict.values) v: 0};
    }
  }

  @override
  Future<List<FactCheck>> getByCategories(List<String> categories) async {
    try {
      return await _api.getByCategories(categories);
    } catch (e) {
      debugPrint('Error fetching fact checks by categories: $e');
      return [];
    }
  }
}
