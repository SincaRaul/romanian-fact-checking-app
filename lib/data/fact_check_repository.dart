import 'dart:math';
import '../models/fact_check.dart';
import 'fact_check_repository_interface.dart';

class FactCheckRepository implements FactCheckRepositoryInterface {
  final _rnd = Random();

  @override
  Future<List<FactCheck>> getLatest({int limit = 20}) async {
    await Future.delayed(const Duration(milliseconds: 250));
    final v = [Verdict.true_, Verdict.false_, Verdict.mixed, Verdict.unclear];

    final mockTitles = [
      'Afirmație #1: „România are cel mai mare deficit bugetar din UE"',
      'Afirmație #2: „Vaccinurile COVID conțin cipuri de urmărire"',
      'Afirmație #3: „Energia regenerabilă este mai scumpă decât cărbunele"',
      'Afirmație #4: „5G cauzează cancer și alte boli"',
      'Afirmație #5: „Schimbările climatice sunt un mit inventat"',
      'Afirmație #6: „Economia României crește cu 7% pe an"',
      'Afirmație #7: „Hidroxiclorochina vindecă COVID-19"',
      'Afirmație #8: „UE vrea să interzică mașinile pe benzină până în 2025"',
    ];

    return List.generate(
      8,
      (i) => FactCheck(
        id: '${1000 + i}',
        title: mockTitles[i],
        verdict: v[i % 4],
        confidence: 50 + _rnd.nextInt(50),
        publishedAt: DateTime.now().subtract(Duration(days: i)),
        autoGenerated: i.isEven,
      ),
    );
  }

  @override
  Future<FactCheck?> getById(String id) async {
    await Future.delayed(const Duration(milliseconds: 200));

    // Simulate getting a specific fact check
    final verdictIndex = int.tryParse(id.substring(id.length - 1)) ?? 0;
    final verdicts = [
      Verdict.true_,
      Verdict.false_,
      Verdict.mixed,
      Verdict.unclear,
    ];

    return FactCheck(
      id: id,
      title:
          'Detalii pentru fact-check $id: „Afirmație detaliată pentru verificare"',
      verdict: verdicts[verdictIndex % 4],
      confidence: 60 + _rnd.nextInt(40),
      publishedAt: DateTime.now().subtract(Duration(days: _rnd.nextInt(7))),
      autoGenerated: verdictIndex.isEven,
    );
  }

  @override
  Future<List<FactCheck>> searchFactChecks(String query) async {
    await Future.delayed(const Duration(milliseconds: 300));
    final allChecks = await getLatest();

    final lowercaseQuery = query.toLowerCase();
    return allChecks
        .where((check) => check.title.toLowerCase().contains(lowercaseQuery))
        .toList();
  }

  @override
  Future<List<FactCheck>> getByVerdict(Verdict verdict) async {
    await Future.delayed(const Duration(milliseconds: 200));
    final allChecks = await getLatest();

    return allChecks.where((check) => check.verdict == verdict).toList();
  }

  @override
  Future<List<FactCheck>> getAutoGenerated() async {
    await Future.delayed(const Duration(milliseconds: 200));
    final allChecks = await getLatest();

    return allChecks.where((check) => check.autoGenerated).toList();
  }

  @override
  Future<Map<Verdict, int>> getVerdictStatistics() async {
    final allChecks = await getLatest();
    final stats = <Verdict, int>{};

    for (final verdict in Verdict.values) {
      stats[verdict] = allChecks
          .where((check) => check.verdict == verdict)
          .length;
    }

    return stats;
  }

  @override
  Future<List<FactCheck>> getByCategories(List<String> categories) async {
    // For mock repository, just return all fact checks (simplified)
    return getLatest();
  }

  @override
  Future<FactCheck> generateWithAI({
    required String question,
    String? category,
  }) async {
    // Mock AI generation with delay
    await Future.delayed(const Duration(seconds: 2));

    final verdicts = [
      Verdict.true_,
      Verdict.false_,
      Verdict.mixed,
      Verdict.unclear,
    ];
    final mockSummaries = [
      'Această afirmație este corectă. Date oficiale confirmă informația.',
      'Această afirmație este falsă. Nu există dovezi științifice care să o susțină.',
      'Afirmația este parțial adevărată. Unele aspecte sunt corecte, altele nu.',
      'Nu există suficiente informații pentru a confirma sau infirma această afirmație.',
    ];

    final randomIndex = _rnd.nextInt(4);

    return FactCheck(
      id: 'ai-${DateTime.now().millisecondsSinceEpoch}',
      title: question,
      verdict: verdicts[randomIndex],
      confidence: 60 + _rnd.nextInt(35), // 60-95% confidence for AI
      publishedAt: DateTime.now(),
      autoGenerated: true,
      summary: mockSummaries[randomIndex],
      category: category ?? 'other',
      sources: [
        'https://gov.ro/comunicat-oficial',
        'https://hotnews.ro/stiri-articol',
        'https://europa.eu/document-oficial',
      ],
    );
  }
}
