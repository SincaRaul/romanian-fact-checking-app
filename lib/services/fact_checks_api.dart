import 'package:dio/dio.dart';
import '../models/fact_check.dart';
import '../services/api_service.dart';

class FactChecksApi {
  final ApiService _apiService;

  FactChecksApi(this._apiService);

  /// Get latest fact checks
  Future<List<FactCheck>> getLatest({int limit = 20}) async {
    try {
      final response = await _apiService.dio.get(
        '/fact-checks',
        queryParameters: {'limit': limit},
      );

      final List<dynamic> data = response.data as List;
      return data.map((json) => _factCheckFromApi(json)).toList();
    } on DioException catch (e) {
      throw Exception('Failed to get fact checks: ${e.message}');
    }
  }

  /// Get fact check by ID
  Future<FactCheck?> getById(String checkId) async {
    try {
      final response = await _apiService.dio.get('/checks/$checkId');
      return _factCheckFromApi(response.data);
    } on DioException catch (e) {
      if (e.response?.statusCode == 404) {
        return null;
      }
      throw Exception('Failed to get fact check: ${e.message}');
    }
  }

  /// Convert API response to FactCheck model
  FactCheck _factCheckFromApi(Map<String, dynamic> json) {
    // Map API verdict to our enum
    Verdict verdict;
    switch (json['verdict'] as String) {
      case 'true':
        verdict = Verdict.true_;
        break;
      case 'false':
        verdict = Verdict.false_;
        break;
      case 'mixed':
        verdict = Verdict.mixed;
        break;
      case 'unclear':
      default:
        verdict = Verdict.unclear;
        break;
    }

    return FactCheck(
      id: json['id'] as String,
      title: json['title'] as String,
      verdict: verdict,
      confidence: json['confidence'] as int,
      publishedAt: json['published_at'] != null
          ? DateTime.parse(json['published_at'] as String)
          : DateTime.now(), // Use current time for draft items
      autoGenerated: json['auto_generated'] as bool? ?? false,
    );
  }
}
