enum Verdict { true_, false_, mixed, unclear }

class FactCheck {
  final String id;
  final String title; // afirmația/tema
  final Verdict verdict; // Adevărat / Fals / etc.
  final int confidence; // 0–100
  final DateTime publishedAt; // data publicării
  final bool autoGenerated; // draft generat automat?

  const FactCheck({
    required this.id,
    required this.title,
    required this.verdict,
    required this.confidence,
    required this.publishedAt,
    this.autoGenerated = false,
  });

  FactCheck copyWith({
    String? id,
    String? title,
    Verdict? verdict,
    int? confidence,
    DateTime? publishedAt,
    bool? autoGenerated,
  }) {
    return FactCheck(
      id: id ?? this.id,
      title: title ?? this.title,
      verdict: verdict ?? this.verdict,
      confidence: confidence ?? this.confidence,
      publishedAt: publishedAt ?? this.publishedAt,
      autoGenerated: autoGenerated ?? this.autoGenerated,
    );
  }

  factory FactCheck.fromJson(Map<String, dynamic> j) => FactCheck(
    id: j['id'] as String,
    title: j['title'] as String,
    verdict: Verdict.values.firstWhere((v) => v.name == j['verdict']),
    confidence: j['confidence'] as int,
    publishedAt: DateTime.parse(j['publishedAt'] as String),
    autoGenerated: j['autoGenerated'] as bool? ?? false,
  );

  Map<String, dynamic> toJson() => {
    'id': id,
    'title': title,
    'verdict': verdict.name,
    'confidence': confidence,
    'publishedAt': publishedAt.toIso8601String(),
    'autoGenerated': autoGenerated,
  };

  @override
  String toString() {
    return 'FactCheck(id: $id, title: $title, verdict: $verdict, confidence: $confidence%)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FactCheck && other.id == id;
  }

  @override
  int get hashCode => id.hashCode;
}
